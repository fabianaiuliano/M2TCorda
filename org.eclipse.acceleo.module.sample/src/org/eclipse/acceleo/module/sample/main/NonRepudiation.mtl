[comment encoding = UTF-8 /]
[module NonRepudiation('http://it.polimi.isgroup.secbpmn2bc.model/1.0', 'http://it.unitn.disi.sweng.gmt.model/1.0', 'http://it.unitn.disi.sweng.secbpmn.model/1.0')]


[comment: java service wrapper supporting the camel case translation for the generated java classes /]
[query public capitalizeString(arg0 : secbpmn::SecBpmnElement, arg1 : String) : String
	= invoke('org.eclipse.acceleo.module.sample.main.myservicewrapper','capitalizeString(it.unitn.disi.sweng.secbpmn.model.SecBpmnElement, java.lang.String)', Sequence{arg0, arg1})/]


[template public generateElement(aNonRepudiation : NonRepudiation)]
[comment @main/]

[file (capitalizeString(aNonRepudiation, self.eContainer(Task).name).replaceAll(' ','').replaceAll('-','').replaceAll('\'','') + 'NonRepudiation.java', false, 'UTF-8')]
public class NonRepudiation {
	public static boolean ensureNonRepudiation (LedgerTransaction tx) {
	// extract the data to be signed from the transaction
	byte['['/][']'/] dataToSign = tx.getInputs().get(0).getState().getData().getBytes();

	// extract the public key of the signer from the transaction
	PublicKey publicKey = tx.getInputs().get(0).getState().getData().getPublicKey();
	
	// extract the digital signature of the data
	byte['['/][']'/] digitalSignature = tx.getInputs().get(0).getState().getSignature().getBytes();
	
	// verify the signature
	return boolean verified = verifySignature(dataToSign, digitalSignature, publicKey);
	}

	public static boolean verifySignature(byte['['/][']'/]data, byte['['/][']'/] digitalSignature, PublicKey publicKey) {
		try {
			Signature signature = Signature.getInstance("SHA256withRSA");
			signature.initVerify(publicKey);
			signature.update(data);
			return signature.verify(digitalSignature);
		} catch(NoSuchAlgorithmException|InvalidKeyException| SignatureException e){
			e.printStackTrace();
			return false;
		}
	}
}
[/file]

[/template]
