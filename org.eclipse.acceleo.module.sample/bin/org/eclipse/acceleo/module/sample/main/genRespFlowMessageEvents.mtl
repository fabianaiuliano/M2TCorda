[comment encoding = UTF-8 /]
[module genRespFlowMessageEvents('http://it.polimi.isgroup.secbpmn2bc.model/1.0', 'http://it.unitn.disi.sweng.gmt.model/1.0', 'http://it.unitn.disi.sweng.secbpmn.model/1.0')]

[comment: java service wrapper supporting the camel case translation for the generated java classes /]
[query public capitalizeString(arg0 : secbpmn::SecBpmnElement, arg1 : String) : String
	= invoke('org.eclipse.acceleo.module.sample.main.myservicewrapper', 'capitalizeString(it.unitn.disi.sweng.secbpmn.model.SecBpmnElement, java.lang.String)', Sequence{arg0, arg1})
/]

[template public generateElement(anEvent : Event)]
[comment @main/]

[for(anEvent.incomingConnections->filter(MessageFlow))]
[if(anEvent.eContainer(Lane) = null)]
[file (capitalizeString(anEvent, anEvent.eContainer(Participant).name).replaceAll(' ','').replaceAll('-','').replaceAll('\'','') + 'Flow' + '.java', true, 'UTF-8')]
@InitiatingFlow
@StartableByRPC
public class [capitalizeString(anEvent, anEvent.name).replaceAll(' ','').replaceAll('-','').replaceAll('\'','') + 'ResponderFlow'/] extends FlowLogic<SignedTransaction>{
private final Party counterparty;
	public InitiatorFlow(Party counterparty){
	this.counterparty = counterparty;
	}
}
[/file]
[elseif(anEvent.eContainer(Lane) <> null)]
[file (capitalizeString(anEvent, anEvent.eContainer(Lane).name).replaceAll(' ','').replaceAll('-','').replaceAll('\'','') + 'Flow' + '.java', true, 'UTF-8')]
@InitiatingFlow
@StartableByRPC
public class [capitalizeString(anEvent, anEvent.name).replaceAll(' ','').replaceAll('-','').replaceAll('\'','') + 'ResponderFlow'/] extends FlowLogic<SignedTransaction>{
private final Party counterparty;
	public InitiatorFlow(Party counterparty){
	this.counterparty = counterparty;
	}
}
[/file]
[/if]
[/for]

[/template]

